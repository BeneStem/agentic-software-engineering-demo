{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create Beschreibung Value Object",
        "description": "Implement the Beschreibung value object as a core domain entity with proper validation rules and sanitization methods",
        "details": "Create a new Kotlin data class in the domain layer at src/main/kotlin/domain/model/Beschreibung.kt. Implement validation in the init block to ensure the value doesn't exceed 500 characters and is not blank. Add a sanitized() method that will delegate to a sanitization service. Use require() for validation to throw IllegalArgumentException on invalid input. Consider adding additional validation for special characters or patterns if needed.",
        "testStrategy": "Write unit tests to verify: 1) Valid descriptions are accepted (edge cases: exactly 500 chars, 1 char), 2) Invalid descriptions throw exceptions (>500 chars, blank, null), 3) Sanitization method is called and returns expected results, 4) Value object equality and immutability work correctly. Use JUnit 5 with Kotlin test assertions.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create the basic data class structure with proper package placement",
            "description": "Set up the Beschreibung data class in the domain layer with correct package structure and basic Kotlin data class syntax",
            "dependencies": [],
            "details": "Create the file at src/main/kotlin/domain/model/Beschreibung.kt with proper package declaration (likely com.company.finden.domain.model). Define as a Kotlin data class with a single val property 'value' of type String. Ensure the class follows domain-driven design principles as a value object with immutability. Add appropriate imports and consider making the class final if not already implicit with data class.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement validation logic in init block with proper error messages",
            "description": "Add an init block to the Beschreibung data class that validates the value according to business rules",
            "dependencies": [
              1
            ],
            "details": "Inside the data class, implement an init block using Kotlin's require() function to enforce validation rules. Check that the value is not blank using value.isNotBlank() and that it doesn't exceed 500 characters using value.length <= 500. Provide clear, descriptive error messages in German or English as per project standards (e.g., 'Beschreibung darf nicht leer sein' and 'Beschreibung darf maximal 500 Zeichen lang sein'). This ensures the value object cannot be instantiated with invalid data.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add the sanitized() method signature that delegates to service",
            "description": "Define a sanitized() method that will delegate the actual sanitization logic to a domain service",
            "dependencies": [
              1
            ],
            "details": "Add a method signature 'fun sanitized(): String' to the Beschreibung class. Since this is a value object in the domain layer, it should not directly depend on infrastructure services. Consider either accepting a sanitizer function as a parameter (functional approach) or defining an interface in the domain layer that will be implemented by the sanitization service. The method should return a sanitized version of the value without modifying the original immutable object.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Write comprehensive unit tests covering all edge cases",
            "description": "Create thorough unit tests for the Beschreibung value object covering validation, equality, and sanitization delegation",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Create BeschreibungTest.kt in src/test/kotlin/domain/model/ using JUnit 5 and Mockk. Test cases should include: valid descriptions (1 char, 500 chars exactly, normal text), invalid descriptions (empty string, blank string, 501+ chars), null handling if applicable, data class equality and hashCode behavior, copy() function behavior, and sanitized() method delegation. Use parameterized tests for boundary value testing. Ensure tests follow BDD format with Given-When-Then structure as per project standards.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Update Produkt Entity with Beschreibung Field",
        "description": "Modify the existing Produkt entity to include the new Beschreibung value object field",
        "details": "Update the Produkt entity in src/main/kotlin/domain/model/Produkt.kt to include a beschreibung field of type Beschreibung. Ensure the entity remains a data class for immutability. Update any existing factory methods or builders. Consider making the field nullable for backward compatibility during migration, then make it required after migration completes. Ensure proper MongoDB field mapping with appropriate annotations.",
        "testStrategy": "Test entity creation with and without beschreibung. Verify MongoDB persistence and retrieval maintains the beschreibung field correctly. Test that the entity can be serialized/deserialized properly. Ensure existing tests still pass after the modification.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Beschreibung field to Produkt entity with MongoDB annotations",
            "description": "Modify the Produkt data class to include a new beschreibung field with proper type declaration and MongoDB field mapping annotations",
            "dependencies": [],
            "details": "1. Add 'beschreibung: Beschreibung?' field to Produkt data class in src/main/kotlin/domain/model/Produkt.kt\n2. Make the field nullable initially for backward compatibility during migration\n3. Add @BsonProperty(\"beschreibung\") annotation for MongoDB field mapping\n4. Update the data class constructor to include the new field with default null value\n5. Ensure the copy() method works correctly with the new field\n6. Verify that equals(), hashCode(), and toString() methods handle the new field properly",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update entity factory methods and builders for Beschreibung support",
            "description": "Modify any existing factory methods, builders, or companion object functions in the Produkt entity to handle the new beschreibung field",
            "dependencies": [
              1
            ],
            "details": "1. Update any factory methods in Produkt companion object to accept beschreibung parameter\n2. Modify builder pattern implementations if they exist to include withBeschreibung() method\n3. Update any entity creation helper functions to handle optional beschreibung\n4. Ensure proper null handling and default values in all creation methods\n5. Add validation logic if required for beschreibung field during entity creation\n6. Document any breaking changes to factory method signatures",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Execute and update all existing tests for backward compatibility",
            "description": "Run the existing test suite and update all failing tests to ensure backward compatibility with the new beschreibung field",
            "dependencies": [
              2
            ],
            "details": "1. Run './gradlew test' to identify all failing tests after entity modification\n2. Update unit tests that create Produkt instances to handle the new nullable field\n3. Modify integration tests that persist/retrieve Produkt entities to work with beschreibung\n4. Update test fixtures and test data builders to include beschreibung field\n5. Ensure serialization/deserialization tests pass with the new field\n6. Verify that existing MongoDB documents without beschreibung field can still be loaded\n7. Add specific tests for backward compatibility scenarios",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Update ProduktRepository with Search Methods",
        "description": "Enhance the repository layer with methods to search products by description content",
        "details": "Update ProduktRepository in src/main/kotlin/infrastructure/persistence/ProduktRepository.kt. Implement findByBeschreibungContains() method using MongoDB regex queries with case-insensitive option. Use proper parameterization to prevent injection. Consider pagination for large result sets. Implement efficient queries that leverage the text index. Handle special characters in search terms properly.",
        "testStrategy": "Integration tests using TestContainers with MongoDB. Test search with various patterns: single words, phrases, special characters, German umlauts. Verify case-insensitive matching. Test pagination if implemented. Measure query performance to ensure <200ms response time. Test with empty and null search terms.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement findByBeschreibungContains method with MongoDB regex",
            "description": "Create the core search method in ProduktRepository using MongoDB's regex capabilities with proper parameterization and case-insensitive matching",
            "dependencies": [],
            "details": "Implement findByBeschreibungContains(searchTerm: String): List<Produkt> in ProduktRepository.kt. Use MongoDB's $regex operator with 'i' flag for case-insensitive search. Properly escape special regex characters in the search term to prevent injection. Handle German umlauts correctly. Ensure the query leverages any existing text indexes on the beschreibung field for optimal performance.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add pagination support using Panache pagination",
            "description": "Extend the repository with paginated search methods to handle large result sets efficiently",
            "dependencies": [
              1
            ],
            "details": "Create findByBeschreibungContainsPaged(searchTerm: String, page: Int, size: Int): PanacheQuery<Produkt>. Utilize Panache's built-in pagination support. Add methods to get total count for pagination metadata. Ensure consistent ordering with .sort('_id') to prevent pagination issues. Consider adding optional sort parameters for flexibility.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement injection prevention and special character handling",
            "description": "Create utility methods to sanitize search input and handle special characters safely in MongoDB queries",
            "dependencies": [
              1
            ],
            "details": "Create a private method escapeRegexSpecialChars(input: String): String that escapes MongoDB regex special characters (., *, +, ?, [, ], {, }, (, ), ^, $, |, \\). Implement proper handling for German special characters (ä, ö, ü, ß). Add input validation to reject malicious patterns. Document the security measures taken to prevent regex DOS attacks.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create comprehensive integration tests with TestContainers",
            "description": "Develop thorough integration tests to verify search functionality, pagination, and security measures using a real MongoDB instance",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Set up TestContainers with MongoDB for integration testing. Test search with: single words, multi-word phrases, German umlauts (ä, ö, ü, ß), special characters, empty strings, very long strings. Verify case-insensitive matching works correctly. Test pagination with various page sizes and edge cases. Measure query performance to ensure <200ms response time. Test injection prevention with malicious regex patterns.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Enhance ProduktService with Beschreibung Operations",
        "description": "Update the application service layer to handle CRUD operations with the new beschreibung field",
        "details": "Modify ProduktService in src/main/kotlin/application/service/ProduktService.kt. Add methods for creating/updating products with descriptions. Integrate BeschreibungSanitizationService for content sanitization before persistence. Add findByBeschreibungContains() method that delegates to repository. Implement proper error handling and validation. Ensure transactional consistency where needed.",
        "testStrategy": "Unit tests mocking repository and sanitization service. Test CRUD operations with valid and invalid descriptions. Verify sanitization is applied before persistence. Test search functionality with various inputs. Test error scenarios and exception handling. Verify service properly delegates to repository.",
        "priority": "medium",
        "dependencies": [
          2,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement create and update methods with beschreibung handling",
            "description": "Add createProdukt() and updateProdukt() methods to ProduktService that properly handle the new beschreibung field. Ensure proper mapping between DTOs and domain entities, including the Beschreibung value object instantiation.",
            "dependencies": [],
            "details": "Implement createProdukt(produktDto: ProduktDto) method that maps DTO to domain entity, creating a Beschreibung value object from the description string. Implement updateProdukt(id: String, produktDto: ProduktDto) that fetches existing product, updates fields including beschreibung, and persists changes. Handle null/empty beschreibung cases appropriately. Ensure transactional boundaries are properly defined with @Transactional annotations where needed.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Integrate BeschreibungSanitizationService with error handling",
            "description": "Wire the BeschreibungSanitizationService into ProduktService and implement proper error handling for sanitization failures. Ensure sanitization occurs before any persistence operations.",
            "dependencies": [
              1
            ],
            "details": "Inject BeschreibungSanitizationService as a dependency in ProduktService constructor. In create/update methods, call sanitizationService.sanitize() on the beschreibung value before creating the Beschreibung value object. Implement try-catch blocks to handle SanitizationException and other potential errors. Map exceptions to appropriate application-level exceptions with meaningful error messages. Consider implementing a circuit breaker pattern if sanitization service is external.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement search method delegation to repository",
            "description": "Create findByBeschreibungContains() method in ProduktService that properly delegates to the repository layer while handling business logic concerns like result mapping and error handling.",
            "dependencies": [],
            "details": "Implement findByBeschreibungContains(searchTerm: String): List<ProduktDto> that validates the search term (not blank, reasonable length), delegates to repository.findByBeschreibungContains(searchTerm), maps domain entities to DTOs, and handles empty results gracefully. Consider adding pagination parameters (page: Int, size: Int) for large result sets. Implement proper logging for search operations for analytics purposes.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Write comprehensive unit tests with proper mocking",
            "description": "Create thorough unit tests for all new ProduktService methods using Mockk to mock dependencies. Cover success paths, error scenarios, and edge cases.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Create ProduktServiceTest class using JUnit 5 and Mockk. Mock ProduktRepository and BeschreibungSanitizationService. Test createProdukt with: valid beschreibung, beschreibung at max length (500 chars), sanitization modifying content, sanitization throwing exception. Test updateProdukt with: changing beschreibung, removing beschreibung, non-existent product ID. Test findByBeschreibungContains with: normal search terms, special characters, empty results, repository exceptions. Verify proper delegation to mocked dependencies using verify blocks. Assert proper exception handling and error messages.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Create ProduktDto with Beschreibung Field",
        "description": "Define or update the Data Transfer Object to include the beschreibung field for API communication",
        "details": "Create or update ProduktDto in src/main/kotlin/application/dto/ProduktDto.kt. Include beschreibung as a String field (not the value object). Add appropriate JSON annotations if needed. Consider validation annotations like @Size(max=500) and @NotBlank. Ensure the DTO follows the existing naming conventions and structure patterns in the codebase.",
        "testStrategy": "Test DTO serialization/deserialization with Jackson. Verify JSON field names match API specification. Test validation annotations work correctly. Test with edge cases: max length strings, empty strings, special characters. Ensure backward compatibility if this is an existing DTO.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Add beschreibung field to ProduktDto",
            "description": "Add the beschreibung field as a String property to ProduktDto with appropriate JSON annotations and Kotlin property definition",
            "dependencies": [],
            "details": "Update or create ProduktDto.kt in application/dto package. Add beschreibung as a nullable String property to support backward compatibility. Include @JsonProperty annotation if field naming differs from JSON. Ensure the property follows existing DTO patterns (val for immutability).",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add validation annotations to beschreibung field",
            "description": "Apply Jakarta Bean Validation annotations to enforce field constraints matching the domain value object rules",
            "dependencies": [
              1
            ],
            "details": "Add @field:Size(max = 500, message = \"Beschreibung must not exceed 500 characters\") and @field:NotBlank(message = \"Beschreibung must not be blank\") annotations. Import jakarta.validation.constraints.* packages. Ensure validation is triggered during deserialization.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Write DTO serialization and deserialization tests",
            "description": "Create comprehensive tests for JSON serialization/deserialization of ProduktDto including the new beschreibung field",
            "dependencies": [
              1,
              2
            ],
            "details": "Create ProduktDtoTest.kt in test directory. Test Jackson serialization with valid beschreibung, max length (500 chars), empty string, and null. Test deserialization from JSON with various inputs. Verify validation annotations trigger on invalid data. Test backward compatibility by deserializing JSON without beschreibung field.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement ProduktMapper for DTO Conversion",
        "description": "Create mapper functions to convert between Produkt entity and ProduktDto, handling the Beschreibung value object conversion",
        "details": "Create ProduktMapper in src/main/kotlin/application/mapper/ProduktMapper.kt. Implement toDto() method that extracts the string value from Beschreibung value object. Implement toEntity() method that creates Beschreibung value object from DTO string. Handle null cases appropriately. Consider using MapStruct if already in use, otherwise implement as simple Kotlin functions. Ensure the mapper is injectable.",
        "testStrategy": "Unit tests for bidirectional mapping. Test with valid descriptions, empty strings, and edge cases. Verify that validation in value object is triggered during toEntity conversion. Test that sanitization is preserved in mappings. Ensure no data loss during conversions.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create toDto method with proper null handling",
            "description": "Implement the toDto method in ProduktMapper that converts a Produkt entity to ProduktDto, extracting the string value from the Beschreibung value object",
            "dependencies": [],
            "details": "Create toDto(produkt: Produkt): ProduktDto method that handles the conversion from entity to DTO. Extract the beschreibung string value using beschreibung.value property. Handle null cases appropriately - if beschreibung is null, set the DTO field to null. Ensure all other Produkt fields are properly mapped to the DTO. Consider using Kotlin's safe call operator (?.) for null-safe access.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create toEntity method with value object construction",
            "description": "Implement the toEntity method in ProduktMapper that converts a ProduktDto to Produkt entity, creating the Beschreibung value object from the DTO string",
            "dependencies": [],
            "details": "Create toEntity(dto: ProduktDto): Produkt method that handles the conversion from DTO to entity. Construct a new Beschreibung value object from the DTO's beschreibung string field. Handle null cases - if the DTO beschreibung is null, set the entity field to null. Ensure the Beschreibung constructor's validation and sanitization logic is triggered during conversion. Map all other DTO fields to the entity appropriately.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Write comprehensive unit tests for bidirectional mapping",
            "description": "Create thorough unit tests for ProduktMapper covering all mapping scenarios including valid data, null cases, and edge cases",
            "dependencies": [
              1,
              2
            ],
            "details": "Create ProduktMapperTest class in src/test/kotlin/application/mapper/. Test toDto method with: valid Produkt with beschreibung, Produkt with null beschreibung, Produkt with empty beschreibung value. Test toEntity method with: valid ProduktDto with beschreibung, ProduktDto with null beschreibung, ProduktDto with empty string beschreibung, ProduktDto with HTML content (verify sanitization). Verify bidirectional mapping preserves data correctly (entity → DTO → entity). Test that validation exceptions from Beschreibung constructor are properly propagated. Use parameterized tests for multiple test cases.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Update REST Endpoints for Beschreibung Support",
        "description": "Modify the ProduktResource REST controller to handle beschreibung in requests and responses, including search functionality",
        "details": "Update ProduktResource in src/main/kotlin/infrastructure/web/ProduktResource.kt. Modify GET endpoint to accept 'beschreibung_contains' query parameter. Update POST/PUT endpoints to accept beschreibung in request body. Integrate with ProduktService and ProduktMapper. Implement proper error handling and return appropriate HTTP status codes. Add OpenAPI annotations for documentation.",
        "testStrategy": "Integration tests for all endpoints using REST Assured. Test GET with and without search filters. Test POST/PUT with valid and invalid descriptions. Verify proper HTTP status codes and error messages. Test query parameter handling and encoding. Performance test to ensure <300ms response time.",
        "priority": "high",
        "dependencies": [
          7,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Add search query parameter support to GET endpoint",
            "description": "Modify the GET /api/v1/products endpoint in ProduktResource to accept 'beschreibung_contains' query parameter for filtering products by description content",
            "dependencies": [],
            "details": "Update the getAllProducts() method to accept an optional @QueryParam(\"beschreibung_contains\") parameter. Delegate the filtering logic to ProduktService.findByBeschreibungContains() when the parameter is present. Ensure proper null/empty string handling. Maintain backward compatibility for requests without the search parameter.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update POST/PUT endpoints for beschreibung handling",
            "description": "Modify POST and PUT endpoints in ProduktResource to accept and process the beschreibung field in request/response DTOs",
            "dependencies": [],
            "details": "Update ProduktDto to include beschreibung field. Modify createProduct() and updateProduct() methods to handle the new field. Ensure the beschreibung is properly mapped through ProduktMapper. Validate that beschreibung meets the length requirements (10-5000 characters) at the REST layer. Return appropriate validation errors in the response.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add comprehensive OpenAPI documentation",
            "description": "Document all endpoint changes with proper OpenAPI annotations including the new beschreibung field and search parameter",
            "dependencies": [
              1,
              2
            ],
            "details": "Add @Parameter annotations for the beschreibung_contains query parameter with description and example. Update @Schema annotations on ProduktDto to document the beschreibung field with constraints. Add @ApiResponse annotations for new error scenarios (400 for invalid beschreibung). Document example requests/responses in OpenAPI. Ensure /api/docs reflects all changes accurately.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement proper error handling and HTTP status codes",
            "description": "Add comprehensive error handling for all beschreibung-related operations with appropriate HTTP status codes and error messages",
            "dependencies": [
              1,
              2
            ],
            "details": "Return 400 Bad Request for invalid beschreibung (too short/long, contains malicious content). Return 404 Not Found when updating non-existent products. Implement proper exception mapping for domain exceptions. Create consistent error response format with clear messages. Handle encoding issues for special characters in search queries. Add proper logging for debugging.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Create comprehensive REST Assured integration tests",
            "description": "Develop integration tests covering all REST endpoint scenarios including search, CRUD operations, error cases, and performance validation",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Test GET endpoint with various search queries including special characters and umlauts. Test POST/PUT with valid beschreibung and edge cases (min/max length). Verify 400 responses for invalid input and XSS attempts. Test pagination and empty result handling. Measure and assert response times < 300ms. Test concurrent requests for thread safety. Verify OpenAPI documentation accuracy.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-16T18:27:44.586Z",
      "updated": "2025-07-16T18:27:44.586Z",
      "description": "Tasks for master context"
    }
  }
}
