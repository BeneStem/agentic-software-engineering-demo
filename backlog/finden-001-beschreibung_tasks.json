{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Create Beschreibung Value Object",
        "description": "Implement the Beschreibung value object as a core domain entity with proper validation rules and sanitization methods",
        "details": "Create a new Kotlin data class in the domain layer at src/main/kotlin/domain/model/Beschreibung.kt. Implement validation in the init block to ensure the value doesn't exceed 500 characters and is not blank. Add a sanitized() method that will delegate to a sanitization service. Use require() for validation to throw IllegalArgumentException on invalid input. Consider adding additional validation for special characters or patterns if needed.",
        "testStrategy": "Write unit tests to verify: 1) Valid descriptions are accepted (edge cases: exactly 500 chars, 1 char), 2) Invalid descriptions throw exceptions (>500 chars, blank, null), 3) Sanitization method is called and returns expected results, 4) Value object equality and immutability work correctly. Use JUnit 5 with Kotlin test assertions.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create the basic data class structure with proper package placement",
            "description": "Set up the Beschreibung data class in the domain layer with correct package structure and basic Kotlin data class syntax",
            "dependencies": [],
            "details": "Create the file at src/main/kotlin/domain/model/Beschreibung.kt with proper package declaration (likely com.company.finden.domain.model). Define as a Kotlin data class with a single val property 'value' of type String. Ensure the class follows domain-driven design principles as a value object with immutability. Add appropriate imports and consider making the class final if not already implicit with data class.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement validation logic in init block with proper error messages",
            "description": "Add an init block to the Beschreibung data class that validates the value according to business rules",
            "dependencies": [
              1
            ],
            "details": "Inside the data class, implement an init block using Kotlin's require() function to enforce validation rules. Check that the value is not blank using value.isNotBlank() and that it doesn't exceed 500 characters using value.length <= 500. Provide clear, descriptive error messages in German or English as per project standards (e.g., 'Beschreibung darf nicht leer sein' and 'Beschreibung darf maximal 500 Zeichen lang sein'). This ensures the value object cannot be instantiated with invalid data.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Write comprehensive unit tests covering all edge cases",
            "description": "Create thorough unit tests for the Beschreibung value object covering validation, equality, and sanitization delegation",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Create BeschreibungTest.kt in src/test/kotlin/domain/model/ using JUnit 5 and Mockk. Test cases should include: valid descriptions (1 char, 500 chars exactly, normal text), invalid descriptions (empty string, blank string, 501+ chars), null handling if applicable, data class equality and hashCode behavior, copy() function behavior, and sanitized() method delegation. Use parameterized tests for boundary value testing. Ensure tests follow BDD format with Given-When-Then structure as per project standards.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 1,
        "title": "Update Produkt Entity with Beschreibung Field",
        "description": "Modify the existing Produkt entity to include the new Beschreibung value object field",
        "details": "Update the Produkt entity in src/main/kotlin/domain/model/Produkt.kt to include a beschreibung field of type Beschreibung. Ensure the entity remains a data class for immutability. Update any existing factory methods or builders. Consider making the field nullable for backward compatibility during migration, then make it required after migration completes. Ensure proper MongoDB field mapping with appropriate annotations.",
        "testStrategy": "Test entity creation with and without beschreibung. Verify MongoDB persistence and retrieval maintains the beschreibung field correctly. Test that the entity can be serialized/deserialized properly. Ensure existing tests still pass after the modification.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Beschreibung field to Produkt entity with MongoDB annotations",
            "description": "Modify the Produkt data class to include a new beschreibung field with proper type declaration and MongoDB field mapping annotations",
            "dependencies": [],
            "details": "1. Add 'beschreibung: Beschreibung?' field to Produkt data class in src/main/kotlin/domain/model/Produkt.kt\n2. Make the field nullable initially for backward compatibility during migration\n3. Add @BsonProperty(\"beschreibung\") annotation for MongoDB field mapping\n4. Update the data class constructor to include the new field with default null value\n5. Ensure the copy() method works correctly with the new field\n6. Verify that equals(), hashCode(), and toString() methods handle the new field properly",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update entity factory methods and builders for Beschreibung support",
            "description": "Modify any existing factory methods, builders, or companion object functions in the Produkt entity to handle the new beschreibung field",
            "dependencies": [
              1
            ],
            "details": "1. Update any factory methods in Produkt companion object to accept beschreibung parameter\n2. Modify builder pattern implementations if they exist to include withBeschreibung() method\n3. Update any entity creation helper functions to handle optional beschreibung\n4. Ensure proper null handling and default values in all creation methods\n5. Add validation logic if required for beschreibung field during entity creation\n6. Document any breaking changes to factory method signatures",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Execute and update all existing tests for backward compatibility",
            "description": "Run the existing test suite and update all failing tests to ensure backward compatibility with the new beschreibung field",
            "dependencies": [
              2
            ],
            "details": "1. Run './gradlew test' to identify all failing tests after entity modification\n2. Update unit tests that create Produkt instances to handle the new nullable field\n3. Modify integration tests that persist/retrieve Produkt entities to work with beschreibung\n4. Update test fixtures and test data builders to include beschreibung field\n5. Ensure serialization/deserialization tests pass with the new field\n6. Verify that existing MongoDB documents without beschreibung field can still be loaded\n7. Add specific tests for backward compatibility scenarios",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Update REST Endpoints for Beschreibung Support",
        "description": "Modify the ProduktResource REST controller to handle beschreibung in requests and responses, including search functionality",
        "details": "Update ProduktResource in src/main/kotlin/infrastructure/web/ProduktResource.kt. Modify GET endpoint to accept 'beschreibung_contains' query parameter. Implement proper error handling and return appropriate HTTP status codes. Add OpenAPI annotations for documentation.",
        "testStrategy": "Integration tests for all endpoints using REST Assured. Test GET with and without search filters. Verify proper HTTP status codes and error messages. Test query parameter handling and encoding. Performance test to ensure <300ms response time.",
        "priority": "high",
        "dependencies": [
          7,
          9
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Add search query parameter support to GET endpoint",
            "description": "Modify the GET /api/v1/products endpoint in ProduktResource to accept 'beschreibung_contains' query parameter for filtering products by description content",
            "dependencies": [],
            "details": "Update the getAllProducts() method to accept an optional @QueryParam(\"beschreibung_contains\") parameter. Delegate the filtering logic to ProduktService.findByBeschreibungContains() when the parameter is present. Ensure proper null/empty string handling. Maintain backward compatibility for requests without the search parameter.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add comprehensive OpenAPI documentation",
            "description": "Document all endpoint changes with proper OpenAPI annotations including the new beschreibung field and search parameter",
            "dependencies": [
              1,
              2
            ],
            "details": "Add @Parameter annotations for the beschreibung_contains query parameter with description and example. Update @Schema annotations on ProduktDto to document the beschreibung field with constraints. Add @ApiResponse annotations for new error scenarios (400 for invalid beschreibung). Document example requests/responses in OpenAPI. Ensure /api/docs reflects all changes accurately.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement proper error handling and HTTP status codes",
            "description": "Add comprehensive error handling for all beschreibung-related operations with appropriate HTTP status codes and error messages",
            "dependencies": [
              1,
              2
            ],
            "details": "Return 400 Bad Request for invalid beschreibung (too short/long, contains malicious content). Return 404 Not Found when updating non-existent products. Implement proper exception mapping for domain exceptions. Create consistent error response format with clear messages. Handle encoding issues for special characters in search queries. Add proper logging for debugging.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create comprehensive REST Assured integration tests",
            "description": "Develop integration tests covering all REST endpoint scenarios including search, CRUD operations, error cases, and performance validation",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Test GET endpoint with various search queries including special characters and umlauts. Verify 400 responses for invalid input and XSS attempts. Test pagination and empty result handling. Measure and assert response times < 300ms. Test concurrent requests for thread safety. Verify OpenAPI documentation accuracy.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-16T18:27:44.586Z",
      "updated": "2025-07-16T18:27:44.586Z",
      "description": "Tasks for master context"
    }
  }
}
